# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/borrows' do
  # This should return the minimal set of attributes required to create a valid
  # Borrow. As you add validations to Borrow, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # BorrowsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Borrow.create! valid_attributes
      get borrows_url, headers: valid_headers, as: :json
      expect(response.successful?).to be(true)
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      borrow = Borrow.create! valid_attributes
      get borrow_url(borrow), as: :json
      expect(response.successful?).to be(true)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Borrow' do
        expect do
          post borrows_url, params: { borrow: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Borrow, :count).by(1)
      end

      it 'renders a JSON response with the new borrow' do
        post borrows_url, params: { borrow: valid_attributes }, headers: valid_headers, as: :json
        expect(response.has_http_status?(:created)).to be(true)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Borrow' do
        expect do
          post borrows_url, params: { borrow: invalid_attributes }, as: :json
        end.not_to change(Borrow, :count)
      end

      it 'renders a JSON response with errors for the new borrow' do
        post borrows_url, params: { borrow: invalid_attributes }, headers: valid_headers, as: :json
        expect(response.has_http_status?(:unprocessable_entity)).to be(true)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested borrow' do
        borrow = Borrow.create! valid_attributes
        patch borrow_url(borrow),
              params: { borrow: new_attributes }, headers: valid_headers, as: :json
        borrow.reload
        skip('Add assertions for updated state')
      end

      it 'renders a JSON response with the borrow' do
        borrow = Borrow.create! valid_attributes
        patch borrow_url(borrow),
              params: { borrow: new_attributes }, headers: valid_headers, as: :json
        expect(response.has_http_status?(:ok)).to be(true)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the borrow' do
        borrow = Borrow.create! valid_attributes
        patch borrow_url(borrow),
              params: { borrow: invalid_attributes }, headers: valid_headers, as: :json
        expect(response.has_http_status?(:unprocessable_entity)).to be(true)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested borrow' do
      borrow = Borrow.create! valid_attributes
      expect do
        delete borrow_url(borrow), headers: valid_headers, as: :json
      end.to change(Borrow, :count).by(-1)
    end
  end
end
